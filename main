#!/usr/bin/python
# -*- coding: UTF-8 -*-
# import dir.mpc
#import dir.data_processing
#import dir.callmpc
# import dir.trystatus
#import dir.plotfigure
#import dir.rec
import dir.ground_data
import dir.callmpc
import fairness.callmpc_fairness
#import dir.newplotfigure
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.ticker as ticker
# dir.data_processing.evdemand_combine_gps()
# dir.data_processing.evdemandwithregion()
# dir.data_processing.evdemand_timeslot_region_to_region()
# dir.data_processing.get_prediction_error()

# dir.callmpc.call_mpc(10,0.1)
# dir.callmpc.call_mpc(8,0.1)
# dir.callmpc.call_mpc(6,0.1)
# dir.callmpc.call_mpc(4,0.1)

# dir.callmpc.call_mpc(10,0.01)
# dir.callmpc.call_mpc(8,0.01)
# dir.callmpc10.call_mpc(4,1)
# dir.callmpc.call_mpc(4,0.01,3)

# for i in range(0,1):
#     dir.callmpc.call_mpc(4,0.5,i)
#
# dir.callmpc.call_mpc(10,1)
# dir.callmpc.call_mpc(8,0.01) #out of memory
# dir.callmpc.call_mpc(6,1)
# dir.callmpc.call_mpc(4,1)
# dir.callmpc.call_mpc(6,0.01)

# 8, 1 finish
# dir.callmpc.call_mpc(4,10)
# dir.callmpc.call_mpc(4,1)
#
# # dir.callmpc.call_mpc(4,0.1)
# dir.callmpc.call_mpc(4,0.1)
# dir.callmpc.call_mpc(4,5)
# dir.callmpc.call_mpc(8,10)
# dir.callmpc.call_mpc(8,100)


# dir.ground_data.ground_supply()

# dir.rec.call_rec()
#
# dir.newplotfigure.temporal()
# dir.newplotfigure.utilization()

# dir.newplotfigure.betaratio()
# dir.newplotfigure.betautilization()
# dir.newplotfigure.betaregionratio()
# cc=[]
# for i in range(3):
#     one=[]
#     for j in range(2):
#         one.append(i+j)
#     cc.append(one)
#
# for i in range(3):
#     for j in range(2):
#         print cc[i][j]


# beta1 = 0.01
# beta2 = 0.01
# fairness.callmpc_fairness.call_mpc_fairness(1,beta1,beta2,2)
# fairness.callmpc_fairness.call_mpc_fairness(2,beta1,beta2,3)

# beta1 = 0.001
# beta2 = 0.001
# fairness.callmpc_fairness.call_mpc_fairness(1,beta1,beta2,4)
# fairness.callmpc_fairness.call_mpc_fairness(2,beta1,beta2,5)

beta1 = 0.1
beta2 = 0.1
# fairness.callmpc_fairness.call_mpc_fairness(1,0.1,0.1,0) # K = 1,beta1 = 0.1,beta2 = 0,2
#
# print 'Round 1 begin'
# fairness.callmpc_fairness.call_mpc_fairness(1, 0.1, 0.1,1) # K = 3
#
# print 'Round 2 begin'
# fairness.callmpc_fairness.call_mpc_fairness(2, 0.1, 0.1, 2) # K = 3
#
# print 'Round 3 begin'
# fairness.callmpc_fairness.call_mpc_fairness(1,0.01,0.01,3)# K=3

print 'Round 4 begin'
fairness.callmpc_fairness.call_mpc_fairness(1,0.01,0.01,4)# K=3